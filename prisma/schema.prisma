generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users that are either authors, contributors or participants in slack threads, issues or pull requests
model User {
  id             String  @id @default(cuid())
  githubUsername String?
  email          String?
  githubToken    String?
  slackId        String?
  optOut         Boolean @default(true)

  messagesAsked      SlackMessage[]
  issuesOpened       GithubItem[]
  participatingItems Participant[]
  snoozedItems       ActionItem[]
  assignedItems      ActionItem[]      @relation("assignee")
  volunteer          VolunteerDetail[]
  followUp           FollowUp[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model SlackMessage {
  id   String @id @default(cuid())
  text String
  ts   String // Cannot convert into DateTime since slack uses this as an ID (string) - 17241837419.1200

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  authorId   String
  author     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  actionItem ActionItem?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([authorId])
  @@index([channelId])
}

model GithubItem {
  id         String         @id @default(cuid())
  title      String         @default("")
  body       String         @default("")
  number     Int
  nodeId     String         @unique
  state      GithubState
  type       GithubItemType
  actionItem ActionItem?

  repositoryId String
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  labelsOnItems LabelsOnItems[]
  volunteer     VolunteerDetail?

  lastAssignedOn DateTime?
  lastPromptedOn DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([repositoryId])
  @@index([authorId])
}

// It can either be a slack message or a github issue / pull request
model ActionItem {
  id String @id @default(cuid())

  slackMessageId String?       @unique
  slackMessage   SlackMessage? @relation(fields: [slackMessageId], references: [id], onDelete: Cascade)

  githubItemId String?     @unique
  githubItem   GithubItem? @relation(fields: [githubItemId], references: [id], onDelete: Cascade)

  firstReplyOn DateTime?
  lastReplyOn  DateTime?
  totalReplies Int
  participants Participant[]

  snoozeCount  Int       @default(0)
  snoozedUntil DateTime?
  snoozedBy    User?     @relation(fields: [snoozedById], references: [id])
  snoozedById  String?

  assignee   User?     @relation(fields: [assigneeId], references: [id], "assignee")
  assigneeId String?
  assignedOn DateTime?

  notes      String       @default("")
  reason     String       @default("")
  status     ActionStatus
  flag       ExtraFlags?
  resolvedAt DateTime?
  followUp   FollowUp[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([slackMessageId])
  @@index([githubItemId])
  @@index([snoozedById])
}

model FollowUp {
  actionItem   ActionItem @relation(fields: [actionItemId], references: [id], onDelete: Cascade)
  actionItemId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([actionItemId, userId])
  @@index([actionItemId])
  @@index([userId])
}

model VolunteerDetail {
  id String @id @default(cuid())

  assignee   User     @relation(fields: [assigneeId], references: [id], onDelete: Cascade)
  assigneeId String
  assignedOn DateTime

  issue   GithubItem? @relation(fields: [issueId], references: [id], onDelete: Cascade)
  issueId String      @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([assigneeId])
}

// Slack channels that are being monitored
model Channel {
  id       String         @id @default(cuid())
  name     String
  slackId  String         @unique
  messages SlackMessage[]

  @@index([id])
}

// List of users that are involved in the thread or an issue / pull request
model Participant {
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  actionItemId String
  actionItem   ActionItem @relation(fields: [actionItemId], references: [id], onDelete: Cascade)

  @@id([userId, actionItemId])
}

model LabelsOnItems {
  labelId String
  label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)

  itemId String
  item   GithubItem @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([labelId, itemId])
}

model Label {
  id            String          @id @default(cuid())
  name          String          @unique
  labelsOnItems LabelsOnItems[]

  @@index([id])
}

model Repository {
  id    String @id @default(cuid())
  name  String
  owner String
  url   String @unique

  items GithubItem[]

  @@index([id])
}

enum GithubItemType {
  issue
  pull_request
}

enum GithubState {
  open
  closed
}

enum ActionStatus {
  open
  closed
}

enum ExtraFlags {
  irrelevant
  resolved
}
