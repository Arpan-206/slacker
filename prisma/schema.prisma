generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users that are either authors, contributors or participants in slack threads, issues or pull requests
model User {
  id             Int     @id @default(autoincrement())
  githubUsername String?
  email          String  @unique
  slackId        String?

  messagesAsked      SlackMessage[]
  issuesOpened       GithubItem[]
  participatingItems Participant[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
}

model SlackMessage {
  id   Int    @id @default(autoincrement())
  text String
  ts   String // Cannot convert into DateTime since slack uses this as an ID (string) - 17241837419.1200

  channelId Int
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  authorId   Int
  author     User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  actionItem ActionItem?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([authorId])
  @@index([channelId])
}

model GithubItem {
  id         Int            @id @default(autoincrement())
  number     Int
  nodeId     String
  databaseId BigInt
  state      GithubState
  type       GithubItemType
  actionItem ActionItem?

  repositoryId Int
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)

  authorId Int
  author   User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([repositoryId])
  @@index([authorId])
}

// It can either be a slack message or a github issue / pull request
model ActionItem {
  id Int @id @default(autoincrement())

  slackMessageId Int?          @unique
  slackMessage   SlackMessage? @relation(fields: [slackMessageId], references: [id], onDelete: Cascade)

  githubItemId Int?        @unique
  githubItem   GithubItem? @relation(fields: [githubItemId], references: [id], onDelete: Cascade)

  firstReplyOn DateTime?
  lastReplyOn  DateTime?
  totalReplies Int
  participants Participant[]

  status     ActionStatus
  flag       ExtraFlags?
  resolvedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id])
  @@index([slackMessageId])
  @@index([githubItemId])
}

// Slack channels that are being monitored
model Channel {
  id       Int            @id @default(autoincrement())
  name     String
  slackId  String         @unique
  messages SlackMessage[]

  @@index([id])
}

// List of users that are involved in the thread or an issue / pull request
model Participant {
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  actionItemId Int
  actionItem   ActionItem @relation(fields: [actionItemId], references: [id], onDelete: Cascade)

  @@id([userId, actionItemId])
}

model Repository {
  id    Int    @id @default(autoincrement())
  name  String
  owner String

  items GithubItem[]

  @@index([id])
}

enum GithubItemType {
  issue
  pull_request
}

enum GithubState {
  open
  closed
}

enum ActionStatus {
  open
  closed
}

enum ExtraFlags {
  irrelevant
  resolved
}
